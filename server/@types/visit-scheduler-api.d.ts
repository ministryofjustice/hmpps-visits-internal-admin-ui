/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/admin/category-groups/group': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create category group
     * @description Create category group
     */
    post: operations['createCategoryGroup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/category-groups/group/{reference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get category group
     * @description Get category group by reference
     */
    get: operations['getCategoryGroup']
    /**
     * Update category group
     * @description Update existing category group by reference
     */
    put: operations['updateCategoryGroup']
    post?: never
    /**
     * Delete category group
     * @description Delete category group by reference
     */
    delete: operations['deleteSessionCategoryGroup']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/category-groups/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get category groups
     * @description Get all category groups for given prison
     */
    get: operations['getCategoryGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/incentive-groups/group': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create incentive group
     * @description Create incentive group
     */
    post: operations['createIncentiveGroup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/incentive-groups/group/{reference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get incentive group
     * @description Get incentive group by reference
     */
    get: operations['getIncentiveGroup']
    /**
     * Update incentive group
     * @description Update existing incentive group by reference
     */
    put: operations['updateIncentiveGroup']
    post?: never
    /**
     * Delete incentive group
     * @description Delete incentive group by reference
     */
    delete: operations['deleteSessionIncentiveGroup']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/incentive-groups/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get incentive groups
     * @description Get all incentive groups for given prison
     */
    get: operations['getIncentiveGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/location-groups/group': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create location group
     * @description Create location group
     */
    post: operations['createLocationGroup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/location-groups/group/{reference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get location group
     * @description Get location group by reference
     */
    get: operations['getLocationGroup']
    /**
     * Update location group
     * @description Update existing location group by reference
     */
    put: operations['updateLocationGroup']
    post?: never
    /**
     * Delete location group
     * @description Delete location group by reference
     */
    delete: operations['deleteSessionLocationGroup']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/location-groups/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get location groups
     * @description Get all location groups for given prison
     */
    get: operations['getLocationGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/prisons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all prisons
     * @description Get all prisons
     */
    get: operations['getPrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/prisons/prison': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a prison
     * @description Create a prison
     */
    post: operations['createPrison']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/prisons/prison/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets prison by given prison id/code
     * @description Gets prison by given prison id/code
     */
    get: operations['getPrison']
    /**
     * Update a prison
     * @description Update a prison
     */
    put: operations['updatePrison']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/prisons/prison/{prisonCode}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate prison using given prison id/code
     * @description Activate prison using given prison id/code
     */
    put: operations['activatePrison']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/prisons/prison/{prisonCode}/client/{type}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate prison client using given prison id/code and client type
     * @description Activate prison client using given prison id/code and client type
     */
    put: operations['activatePrisonForClient']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/prisons/prison/{prisonCode}/client/{type}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate prison client using given prison id/code and client type
     * @description Deactivate prison client using given prison id/code and client type
     */
    put: operations['deActivatePrisonClient']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/prisons/prison/{prisonCode}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate prison using given prison id/code
     * @description Deactivate prison using given prison id/code
     */
    put: operations['deActivatePrison']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get session templates
     * @description Get session templates by given parameters
     */
    get: operations['getSessionTemplates']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/move/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Move visits from 1 session template to another.
     * @description Move visits from 1 session template to another if the new session template has same details as the current one.
     */
    post: operations['moveVisits']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a session template
     * @description Create a session templates
     */
    post: operations['createSessionTemplate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/matching/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get matching session templates
     * @description Get matching session templates
     */
    post: operations['getMatchingSessionTemplatesOnCreate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get session template
     * @description Get session template by reference
     */
    get: operations['getSessionTemplate']
    /**
     * Update a session template
     * @description Update a session templates
     */
    put: operations['updateSessionTemplate']
    post?: never
    /**
     * Delete session template by reference
     * @description Delete session template by reference
     */
    delete: operations['deleteSessionTemplate']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate session template using given session template reference
     * @description Activate session template using given session template reference
     */
    put: operations['activateSessionTemplate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/client/{type}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate session template client using given session template reference and client type
     * @description Activate a session template for a user client type
     */
    put: operations['activateSessionTemplateForClient']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/client/{type}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate session template client using given session template reference and client type
     * @description Deactivate a session template for a user client type
     */
    put: operations['deActivateSessionTemplateClient']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate session template using given session template reference
     * @description Deactivate session template using given session template reference
     */
    put: operations['deActivateSessionTemplate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/exclude-date': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get exclude dates for a session template.
     * @description Get exclude dates for a session template.
     */
    get: operations['getPrisonExcludeDates_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/exclude-date/add': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Add exclude date to a session.
     * @description Add exclude date to a session.
     */
    put: operations['addSessionExcludeDate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/exclude-date/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Remove exclude date for a session template.
     * @description Remove exclude date for a session template.
     */
    put: operations['removeSessionTemplateExcludeDate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/matching/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get matching session templates
     * @description Get matching session templates
     */
    post: operations['getMatchingSessionTemplatesOnUpdate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/session-templates/template/{reference}/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get session template visits stats using given session template reference
     * @description Session template visits stats using given session template reference
     */
    post: operations['getSessionTemplateVisitStats']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/user-type/{type}/supported': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get supported prisons
     * @description Get all supported prisons id's
     */
    get: operations['getSupportedPrisonCodes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate-visits': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Migrate a visit */
    post: operations['migrateVisit']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate-visits/{reference}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Migrate a cancelled booked visit */
    put: operations['cancelVisit_1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisons/prison/{prisonCode}/exclude-date': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get exclude dates for a prison.
     * @description Get exclude dates for a prison.
     */
    get: operations['getPrisonExcludeDates']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisons/prison/{prisonCode}/exclude-date/add': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Add exclude date to a prison.
     * @description Add exclude date to a prison.
     */
    put: operations['addPrisonExcludeDate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisons/prison/{prisonCode}/exclude-date/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Remove exclude date from a prison.
     * @description Remove exclude date from a prison.
     */
    put: operations['removePrisonExcludeDate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/visits/booked/future': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get future public booked visits by booker reference
     * @description Get future public booked visits by booker reference
     */
    get: operations['getFuturePublicBookedVisitsByBookerReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/visits/booked/past': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get public past visits by booker reference
     * @description Get public past visits by booker reference
     */
    get: operations['getPublicPastVisitsByBookerReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/visits/cancelled': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get public cancelled visits by booker reference
     * @description Get public cancelled visits by booker reference
     */
    get: operations['getPublicCanceledVisitsByBookerReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns all visit sessions which are within the reservable time period - whether or not they are full
     * @description Retrieve all visits for a specified prisoner
     */
    get: operations['getVisitBookingSessions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/available': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
     * @description Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
     */
    get: operations['getAvailableVisitBookingSessions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/capacity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the session capacity for the given sessions
     * @description Returns the session capacity for the given sessions
     */
    get: operations['getSessionCapacity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns session scheduled for given prison and date
     * @description Returns session scheduled for given prison and date
     */
    get: operations['getSessionSchedule']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/session': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a single VSIP session
     * @description Returns a single VSIP session
     */
    get: operations['getVisitSession']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/application/slot/reserve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create an initial application and reserve a slot */
    post: operations['createInitialApplication']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/application/{applicationReference}/slot/change': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Change an incomplete application */
    put: operations['changeIncompleteApplication']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/application/{bookingReference}/change': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Create an application for an existing visit */
    put: operations['createApplicationForAnExistingVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/external-system': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a visit which already exists in an external system
     * @description The visit is assumed to have been validated at this point, this endpoint does not check that this visit is valid.
     */
    post: operations['createVisitFromExternalSystem']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/external-system/{clientReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get visit reference from given client reference */
    get: operations['getVisitReferenceByClientReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/external-system/{reference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update visit which already exists in an external system
     * @description The visit is assumed to have been validated at this point, this endpoint does not check that this visit is valid.
     */
    put: operations['updateVisitFromExternalSystem']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/non-association/changed': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that non association between two prisoners has changed */
    post: operations['notifyVSiPThatNonAssociationHasChanged']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/person/restriction/upserted': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that an upsert for a person/visitor restriction has taken place */
    post: operations['notifyVSiPThatPersonRestrictionUpserted']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/prisoner/alerts/updated': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that a prisoner alert has been created or updated */
    post: operations['notifyVSiPThatPrisonerAlertCreatedUpdated']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/prisoner/received': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that a prisoner has been received */
    post: operations['notifyVSiPThatPrisonerReceivedChanged']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/prisoner/released': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that a prisoner has been released */
    post: operations['notifyVSiPThatPrisonerReleasedChanged']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/prisoner/restriction/changed': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that a change to prisoner restriction has taken place */
    post: operations['notifyVSiPThatPrisonerRestrictionChanged']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/visit/{reference}/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get visit notification events by booking reference
     * @description Retrieve visit  notification events by booking reference
     */
    get: operations['getNotificationEventsForBookingReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/visit/{reference}/ignore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Do not change an existing booked visit and ignore all notifications */
    put: operations['ignoreVisitNotifications']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/visitor/approved': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that a visitor has been approved */
    post: operations['notifyVSiPThatVisitorApproved']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/visitor/restriction/upserted': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that a change to a visitor restriction has taken place */
    post: operations['notifyVSiPThatVisitorRestrictionUpserted']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/visitor/unapproved': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** To notify VSiP that a visitor has been unapproved */
    post: operations['notifyVSiPThatVisitorUnapproved']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/{prisonCode}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get notification count for a prison
     * @description Retrieve notification count by prison code
     */
    get: operations['getNotificationCountForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/{prisonCode}/visits': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get future visits with notifications by prison code
     * @description Retrieve future visits that have a notification event attribute associated, empty response if no future visits with notifications found.
     */
    get: operations['getFutureNotificationVisits']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notify/callback': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** To notify VSiP that a callback response has been received from GOV.UK notify */
    put: operations['handleNotifyCallback']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notify/create': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** To notify VSiP that a message / email has been sent to GOV.UK notify */
    put: operations['notifyMessageCreated']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get visits
     * @description Retrieve visits with optional filters, sorted by start timestamp descending
     */
    get: operations['getVisitsByFilterPageable']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/search/future/{prisonerNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get future (booked and cancelled) visits for a prisoner
     * @description Get future visits for given prisoner number
     */
    get: operations['getFutureVisitsBySessionPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/session-template': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get visits for a date or a range of dates with / without a session template reference
     * @description Get visits for a date or a range of dates with a session template reference or visits without a session template reference when session template reference is not passed
     */
    get: operations['getVisitsBy']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{applicationReference}/book': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Book a visit (end of flow) */
    put: operations['bookVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{applicationReference}/visit': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get visit from given application reference */
    get: operations['getVisitByApplicationReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{applicationReference}/visit/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update a visit */
    put: operations['updateVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{reference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a visit
     * @description Retrieve visit by visit reference
     */
    get: operations['getVisitByReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{reference}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Cancel an existing booked visit */
    put: operations['cancelVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{reference}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get visit history
     * @description Retrieve visit history by visit reference
     */
    get: operations['getVisitHistoryByReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Actioned By */
    ActionedByDto: {
      /**
       * @description booker reference
       * @example asd-aed-vhj
       */
      bookerReference?: string
      /**
       * @description User Name
       * @example AS/ALED
       */
      userName?: string
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
    }
    /** @description Application */
    ApplicationDto: {
      /**
       * @description Application status
       * @example IN_PROGRESS
       * @enum {string}
       */
      applicationStatus: 'IN_PROGRESS' | 'ACCEPTED'
      /**
       * Format: date-time
       * @description The visit created date and time
       * @example 2018-12-01T13:45:00
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /**
       * Format: date-time
       * @description The visit modified date and time
       * @example 2018-12-01T13:45:00
       */
      modifiedTimestamp: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description application reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Is the application reserved
       * @example true
       */
      reserved: boolean
      /**
       * @description session template Reference
       * @example dfs-wjs-eqr
       */
      sessionTemplateReference?: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      /** @description Contact associated with the application */
      visitContact?: components['schemas']['ContactDto']
      /** @description Visit Notes */
      visitNotes: components['schemas']['VisitNoteDto'][]
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description Additional support associated with the application */
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /** @description List of visitors associated with the application */
      visitors: components['schemas']['VisitorDto'][]
    }
    /** @description Visitor support */
    ApplicationSupportDto: {
      /**
       * @description Support text description, if empty is given then existing support text will be removed
       * @example visually impaired assistance
       */
      description: string
    }
    ApplicationValidationErrorResponse: {
      developerMessage?: string
      /** Format: int32 */
      errorCode?: number
      /** Format: int32 */
      status: number
      userMessage?: string
      validationErrors: (
        | 'APPLICATION_INVALID_PRISONER_NOT_FOUND'
        | 'APPLICATION_INVALID_PRISON_PRISONER_MISMATCH'
        | 'APPLICATION_INVALID_SESSION_NOT_AVAILABLE'
        | 'APPLICATION_INVALID_SESSION_TEMPLATE_NOT_FOUND'
        | 'APPLICATION_INVALID_NON_ASSOCIATION_VISITS'
        | 'APPLICATION_INVALID_VISIT_ALREADY_BOOKED'
        | 'APPLICATION_INVALID_NO_VO_BALANCE'
        | 'APPLICATION_INVALID_NO_SLOT_CAPACITY'
        | 'APPLICATION_INVALID_USER_TYPE'
      )[]
    }
    /** @description Visit Session */
    AvailableVisitSessionDto: {
      /**
       * Format: date
       * @description Session date
       * @example 2020-11-01
       */
      sessionDate: string
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      sessionRestriction: 'OPEN' | 'CLOSED'
      /**
       * @description sessionTemplateReference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /** @description Session time slot */
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
    }
    BookingRequestDto: {
      /** @description Username for user who actioned this request */
      actionedBy: string
      /** @description allow over booking method */
      allowOverBooking: boolean
      /**
       * @description application method
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /**
       * @description User type for user who actioned this request
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
    }
    CancelVisitDto: {
      /** @description Username for user who actioned this request */
      actionedBy: string
      /**
       * @description application method
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /** @description Outcome - status and text */
      cancelOutcome: components['schemas']['OutcomeDto']
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
    }
    ChangeApplicationDto: {
      /** @description allow over booking */
      allowOverBooking: boolean
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      applicationRestriction?: 'OPEN' | 'CLOSED'
      /**
       * Format: date
       * @description The date for the visit
       * @example 2018-12-01
       */
      sessionDate: string
      /**
       * @description Session template reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['ContactDto']
      /** @description additional support associated with the visit, if null support will not be updated */
      visitorSupport?: components['schemas']['ApplicationSupportDto']
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
    }
    /** @description Contact */
    ContactDto: {
      /**
       * @description Contact Email Address
       * @example email@example.com
       */
      email?: string
      /**
       * @description Contact Name
       * @example John Smith
       */
      name: string
      /**
       * @description Contact Phone Number
       * @example 01234 567890
       */
      telephone?: string
    }
    CreateApplicationDto: {
      /** @description Username for user who actioned this request */
      actionedBy: string
      /** @description allow over booking */
      allowOverBooking: boolean
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      applicationRestriction: 'OPEN' | 'CLOSED'
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * Format: date
       * @description The date for the visit
       * @example 2018-12-01
       */
      sessionDate: string
      /**
       * @description Session template reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['ContactDto']
      /** @description additional support associated with the visit */
      visitorSupport?: components['schemas']['ApplicationSupportDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
    }
    CreateCategoryGroupDto: {
      /** @description list of categories for group */
      categories: (
        | 'A_EXCEPTIONAL'
        | 'A_HIGH'
        | 'A_PROVISIONAL'
        | 'A_STANDARD'
        | 'B'
        | 'C'
        | 'D'
        | 'YOI_CLOSED'
        | 'YOI_OPEN'
        | 'YOI_RESTRICTED'
        | 'UNSENTENCED'
        | 'UNCATEGORISED_SENTENCED_MALE'
        | 'FEMALE_RESTRICTED'
        | 'FEMALE_CLOSED'
        | 'FEMALE_SEMI'
        | 'FEMALE_OPEN'
      )[]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
    }
    CreateIncentiveGroupDto: {
      /** @description list of allowed incentive levels for group */
      incentiveLevels: ('ENHANCED' | 'ENHANCED_2' | 'ENHANCED_3' | 'BASIC' | 'STANDARD')[]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
    }
    CreateLegacyContactOnVisitRequestDto: {
      /**
       * @description Contact Name
       * @default UNKNOWN
       * @example John Smith
       */
      name: string
      /**
       * @description Contact Phone Number
       * @example 01234 567890
       */
      telephone?: string
    }
    CreateLegacyDataRequestDto: {
      /**
       * Format: int64
       * @description NOMIS lead visitor ID
       * @example 1234556
       */
      leadVisitorId: number
    }
    CreateLocationGroupDto: {
      /** @description list of locations for group */
      locations: components['schemas']['PermittedSessionLocationDto'][]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
    }
    CreateSessionTemplateDto: {
      /** @description list of group references for allowed prisoner category groups */
      categoryGroupReferences?: string[]
      /** @description Session template user clients. */
      clients: components['schemas']['UserClientDto'][]
      /**
       * @description day of week fpr visit
       * @example MONDAY
       * @enum {string}
       */
      dayOfWeek: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
      /** @description list of group references for allowed prisoner incentive levels */
      incentiveLevelGroupReferences?: string[]
      /** @description Determines behaviour of category groups. True equates to these category groups being included, false equates to them being excluded. */
      includeCategoryGroupType: boolean
      /** @description Determines behaviour of incentive groups. True equates to these incentive groups being included, false equates to them being excluded. */
      includeIncentiveGroupType: boolean
      /** @description Determines behaviour of location groups. True equates to these location groups being included, false equates to them being excluded. */
      includeLocationGroupType: boolean
      /** @description list of group references for permitted session location groups */
      locationGroupReferences?: string[]
      /**
       * @description Name for Session template
       * @example Monday Xmas
       */
      name: string
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
      /** @description The open and closed capacity of the session template */
      sessionCapacity: components['schemas']['SessionCapacityDto']
      /** @description The start and end date of the Validity period for the session template */
      sessionDateRange: components['schemas']['SessionDateRangeDto']
      /** @description The start and end time of the generated visit session(s) */
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * Format: int32
       * @description number of weeks until the weekly day is repeated
       * @example 1
       */
      weeklyFrequency: number
    }
    CreateVisitFromExternalSystemDto: {
      /**
       * @description Client name
       * @example client_name
       */
      clientName: string
      /**
       * @description Client visit reference
       * @example Reference ID in the client system
       */
      clientVisitReference: string
      /**
       * Format: date-time
       * @description The date and time of when the visit was created in NEXUS
       * @example 2018-12-01T13:45:00
       */
      createDateTime: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /**
       * @description Prison Id
       * @example 3-character code, example = MDI
       */
      prisonId: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /** @description Contact associated with the visit */
      visitContact: components['schemas']['ContactDto']
      /** @description Visit Notes */
      visitNotes: components['schemas']['VisitNoteDto'][]
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Room
       * @example A1
       */
      visitRoom: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description Additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
    }
    ErrorResponse: {
      developerMessage?: string
      /** Format: int32 */
      errorCode?: number
      /** Format: int32 */
      status: number
      userMessage?: string
    }
    /** @description Event Audit */
    EventAuditDto: {
      /** @description Event actioned by information */
      actionedBy: components['schemas']['ActionedByDto']
      /**
       * @description What was the application method for this event
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /**
       * Format: date-time
       * @description event creat date and time
       * @example 2018-12-01T13:45:00
       */
      createTimestamp: string
      /**
       * Format: int64
       * @description The id of the event
       */
      id: number
      /** @description Notify history for the event */
      notifyHistory: components['schemas']['NotifyHistoryDto'][]
      /** @description Session template used for this event */
      sessionTemplateReference?: string
      /** @description Notes added against the event */
      text?: string
      /**
       * @description The type of event
       * @enum {string}
       */
      type:
        | 'RESERVED_VISIT'
        | 'CHANGING_VISIT'
        | 'MIGRATED_VISIT'
        | 'BOOKED_VISIT'
        | 'UPDATED_VISIT'
        | 'CANCELLED_VISIT'
        | 'NON_ASSOCIATION_EVENT'
        | 'PRISONER_RELEASED_EVENT'
        | 'PRISONER_RECEIVED_EVENT'
        | 'PRISONER_RESTRICTION_CHANGE_EVENT'
        | 'PRISONER_ALERTS_UPDATED_EVENT'
        | 'PRISON_VISITS_BLOCKED_FOR_DATE'
        | 'SESSION_VISITS_BLOCKED_FOR_DATE'
        | 'IGNORE_VISIT_NOTIFICATIONS_EVENT'
        | 'PERSON_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_UNAPPROVED_EVENT'
        | 'UPDATED_NON_ASSOCIATION_VISIT_EVENT'
        | 'CANCELLED_NON_ASSOCIATION_VISIT_EVENT'
        | 'IGNORED_NON_ASSOCIATION_VISIT_NOTIFICATIONS_EVENT'
        | 'PAIRED_VISIT_CANCELLED_IGNORED_OR_UPDATED_EVENT'
    }
    /** @description Prison exclude date */
    ExcludeDateDto: {
      /** @description actioned by */
      actionedBy: string
      /**
       * Format: date
       * @description exclude date
       */
      excludeDate: string
    }
    IgnoreVisitNotificationsDto: {
      /** @description Username for user who actioned this request */
      actionedBy: string
      /** @description Reason why the visit's notifications can be ignored */
      reason: string
    }
    /** @description Migrate visit request */
    MigrateVisitRequestDto: {
      /** @description Username for user who actioned this request */
      actionedBy?: string
      /**
       * Format: date-time
       * @description The date and time of when the visit was created in NOMIS
       * @example 2018-12-01T13:45:00
       */
      createDateTime?: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /** @description Create legacy data */
      legacyData?: components['schemas']['CreateLegacyDataRequestDto']
      /**
       * Format: date-time
       * @description The date and time of when the visit was modified in NOMIS
       * @example 2018-12-10T13:45:00
       */
      modifyDateTime?: string
      /**
       * @description Outcome Status
       * @default NOT_RECORDED
       * @enum {string}
       */
      outcomeStatus:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
        | 'BOOKER_CANCELLED'
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['CreateLegacyContactOnVisitRequestDto']
      /** @description Visit notes */
      visitNotes?: components['schemas']['VisitNoteDto'][]
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Room
       * @example A1
       */
      visitRoom: string
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN'
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
    }
    MigratedCancelVisitDto: {
      /** @description Username for user who actioned this request */
      actionedBy: string
      /** @description Outcome - status and text */
      cancelOutcome: components['schemas']['OutcomeDto']
    }
    MoveVisitsDto: {
      /**
       * Format: date
       * @description Date from which booked / reserved visits need to be moved .
       * @example 2023-09-01
       */
      fromDate: string
      /**
       * @description Session template reference for session template from which booked / reserved visits need to be moved.
       * @example v9d.7ed.7u
       */
      fromSessionTemplateReference: string
      /**
       * @description Session template reference for session template to which booked / reserved visits need to be moved.
       * @example v9d.7ed.5e
       */
      toSessionTemplateReference: string
    }
    NonAssociationChangedNotificationDto: {
      nonAssociationPrisonerNumber: string
      prisonerNumber: string
      /** @enum {string} */
      type: 'NON_ASSOCIATION_CREATED' | 'NON_ASSOCIATION_UPSERT' | 'NON_ASSOCIATION_CLOSED' | 'NON_ASSOCIATION_DELETED'
    }
    NotificationCountDto: {
      /** Format: int32 */
      count: number
    }
    /** @description Gov Notify Callback Notification */
    NotifyCallbackNotificationDto: {
      /**
       * Format: date-time
       * @description The timestamp for the final update of the notification (when delivered or ultimately failed)
       */
      completedAt?: string
      /**
       * Format: date-time
       * @description The timestamp for when the vsip notification service sent the notification to gov notify
       */
      createdAt: string
      /**
       * @description The id of the event audit which the notification is linked to
       * @example 123456
       */
      eventAuditReference: string
      /** @description The UUID of the notification */
      notificationId: string
      /**
       * @description The type of the notification
       * @example email
       */
      notificationType: string
      /**
       * Format: date-time
       * @description The timestamp for when gov notify sent the notification
       */
      sentAt?: string
      /** @description The email or phone number the notification was sent to */
      sentTo: string
      /** @description The final status of the notification */
      status: string
      /**
       * @description The id the template used for the notification
       * @example email
       */
      templateId: string
      /**
       * @description The version of the template used for the notification
       * @example email
       */
      templateVersion: string
    }
    /** @description Gov Notify Create Notification */
    NotifyCreateNotificationDto: {
      /**
       * Format: date-time
       * @description The timestamp for when the vsip notification service sent the notification to gov notify
       */
      createdAt: string
      /** @description The UUID of the notification */
      notificationId: string
      /**
       * @description The type of the notification
       * @example email
       */
      notificationType: string
      /**
       * @description The id of the event audit which the notification is linked to
       * @example 123456
       */
      reference: string
      /**
       * @description The id the template used for the notification
       * @example email
       */
      templateId: string
      /**
       * @description The version of the template used for the notification
       * @example email
       */
      templateVersion: string
    }
    NotifyHistoryDto: {
      /**
       * Format: date-time
       * @description Notification Completed At
       */
      completedAt?: string
      /**
       * Format: date-time
       * @description Notification Created At
       */
      createdAt?: string
      /**
       * Format: int64
       * @description The event audit id the notify event is associated with
       */
      eventAuditId: number
      /** @description The notification id for Notify action */
      notificationId: string
      /**
       * @description Notification Type (Email / SMS)
       * @enum {string}
       */
      notificationType: 'EMAIL' | 'SMS'
      /**
       * Format: date-time
       * @description Notification Sent At
       */
      sentAt?: string
      /** @description The email or phone number the notification was sent to */
      sentTo?: string
      /**
       * @description Notification Status
       * @enum {string}
       */
      status: 'SENDING' | 'DELIVERED' | 'FAILED' | 'UNKNOWN'
    }
    /** @description Visit Outcome */
    OutcomeDto: {
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
        | 'BOOKER_CANCELLED'
      /**
       * @description Outcome text
       * @example Because he got covid
       */
      text?: string
    }
    PageVisitDto: {
      content?: components['schemas']['VisitDto'][]
      empty?: boolean
      first?: boolean
      last?: boolean
      /** Format: int32 */
      number?: number
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      /** Format: int32 */
      size?: number
      sort?: components['schemas']['SortObject']
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      /** Format: int32 */
      pageNumber?: number
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      sort?: components['schemas']['SortObject']
      unpaged?: boolean
    }
    PermittedSessionLocationDto: {
      /**
       * @description Level four location code
       * @example 001
       */
      levelFourCode?: string
      /**
       * @description Level one location code
       * @example w
       */
      levelOneCode: string
      /**
       * @description Level three location code
       * @example 1
       */
      levelThreeCode?: string
      /**
       * @description Level two location code
       * @example c
       */
      levelTwoCode?: string
    }
    PersonRestrictionUpsertedNotificationDto: {
      prisonerNumber: string
      restrictionId: string
      restrictionType: string
      /** Format: date */
      validFromDate: string
      /** Format: date */
      validToDate?: string
      visitorId: string
    }
    /** @description Prison dto */
    PrisonDto: {
      /**
       * @description is prison active
       * @example true
       */
      active: boolean
      /**
       * Format: int32
       * @description Age of adults in years
       */
      adultAgeYears: number
      /** @description prison user client */
      clients: components['schemas']['UserClientDto'][]
      /**
       * @description prison code
       * @example BHI
       */
      code: string
      /**
       * Format: int32
       * @description Max number of adults
       */
      maxAdultVisitors: number
      /**
       * Format: int32
       * @description Max number of children
       */
      maxChildVisitors: number
      /**
       * Format: int32
       * @description Max number of total visitors
       */
      maxTotalVisitors: number
      /**
       * Format: int32
       * @description maximum number of days notice from the current date to booked a visit
       * @example 28
       */
      policyNoticeDaysMax: number
      /**
       * Format: int32
       * @description minimum number of days notice from the current date to booked a visit
       * @example 2
       */
      policyNoticeDaysMin: number
    }
    PrisonerAlertCreatedUpdatedNotificationDto: {
      activeAlerts: string[]
      alertsAdded: string[]
      alertsRemoved: string[]
      description: string
      prisonerNumber: string
    }
    PrisonerReceivedNotificationDto: {
      prisonCode: string
      prisonerNumber: string
      /** @enum {string} */
      reason: 'ADMISSION' | 'TEMPORARY_ABSENCE_RETURN' | 'RETURN_FROM_COURT' | 'TRANSFERRED'
    }
    PrisonerReleasedNotificationDto: {
      prisonCode: string
      prisonerNumber: string
      /** @enum {string} */
      reasonType:
        | 'TEMPORARY_ABSENCE_RELEASE'
        | 'RELEASED_TO_HOSPITAL'
        | 'RELEASED'
        | 'SENT_TO_COURT'
        | 'TRANSFERRED'
        | 'UNKNOWN'
    }
    PrisonerRestrictionChangeNotificationDto: {
      prisonerNumber: string
      /** Format: date */
      validFromDate: string
      /** Format: date */
      validToDate?: string
    }
    RequestSessionTemplateVisitStatsDto: {
      /**
       * Format: date
       * @description Visits from date - for stats
       * @example 2019-11-02
       */
      visitsFromDate: string
      /**
       * Format: date
       * @description Visits to date - for stats
       * @example 2019-11-30
       */
      visitsToDate?: string
    }
    /** @description Session Capacity */
    SessionCapacityDto: {
      /**
       * Format: int32
       * @description closed capacity
       * @example 10
       */
      closed: number
      /**
       * Format: int32
       * @description open capacity
       * @example 50
       */
      open: number
    }
    SessionCategoryGroupDto: {
      /** @description list of allowed prisoner categories for group */
      categories: (
        | 'A_EXCEPTIONAL'
        | 'A_HIGH'
        | 'A_PROVISIONAL'
        | 'A_STANDARD'
        | 'B'
        | 'C'
        | 'D'
        | 'YOI_CLOSED'
        | 'YOI_OPEN'
        | 'YOI_RESTRICTED'
        | 'UNSENTENCED'
        | 'UNCATEGORISED_SENTENCED_MALE'
        | 'FEMALE_RESTRICTED'
        | 'FEMALE_CLOSED'
        | 'FEMALE_SEMI'
        | 'FEMALE_OPEN'
      )[]
      /**
       * @description Group name
       * @example Category A Group
       */
      name: string
      /**
       * @description Reference
       * @example v9-d7-ed-7u
       */
      reference: string
    }
    SessionDateRangeDto: {
      /**
       * Format: date
       * @description The start of the Validity period for the session template
       * @example 2019-11-02
       */
      validFromDate: string
      /**
       * Format: date
       * @description The end of the Validity period for the session template
       * @example 2019-12-02
       */
      validToDate?: string
    }
    SessionIncentiveLevelGroupDto: {
      /** @description list of allowed incentive levels for group */
      incentiveLevels: ('ENHANCED' | 'ENHANCED_2' | 'ENHANCED_3' | 'BASIC' | 'STANDARD')[]
      /**
       * @description Group name
       * @example Enhanced
       */
      name: string
      /**
       * @description Reference
       * @example v9-d7-ed-7u
       */
      reference: string
    }
    SessionLocationGroupDto: {
      /** @description list of locations for group */
      locations: components['schemas']['PermittedSessionLocationDto'][]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
      /**
       * @description Reference
       * @example v9-d7-ed-7u
       */
      reference: string
    }
    /** @description Session schedule */
    SessionScheduleDto: {
      /** @description Determines behaviour of category groups. True will mean the category groups are inclusive, false means they are exclusive. */
      areCategoryGroupsInclusive: boolean
      /** @description Determines behaviour of incentive groups. True will mean the incentive groups are inclusive, false means they are exclusive. */
      areIncentiveGroupsInclusive: boolean
      /** @description Determines behaviour of location groups. True will mean the location groups are inclusive, false means they are exclusive. */
      areLocationGroupsInclusive: boolean
      /** @description The capacity for the session */
      capacity: components['schemas']['SessionCapacityDto']
      /**
       * @description prisoner category groups
       * @example Category A Prisoners
       */
      prisonerCategoryGroupNames: string[]
      /**
       * @description prisoner incentive level groups
       * @example Enhanced Incentive Level Prisoners
       */
      prisonerIncentiveLevelGroupNames: string[]
      /**
       * @description prisoner location groups
       * @example Wing C
       */
      prisonerLocationGroupNames: string[]
      /** @description Validity period for the session template */
      sessionDateRange: components['schemas']['SessionDateRangeDto']
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /** @description The time slot of the generated visit session(s) */
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
      /**
       * @description visit room name
       * @example Visits Room
       */
      visitRoom: string
      /**
       * @description visit type
       * @example Social
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * Format: int32
       * @description number of weeks until the weekly day is repeated
       * @example 1
       */
      weeklyFrequency: number
    }
    SessionTemplateDto: {
      /**
       * @description is session template active
       * @example true
       */
      active: boolean
      /** @description User Client's for the session template */
      clients: components['schemas']['UserClientDto'][]
      /**
       * @description day of week for visit
       * @example MONDAY
       * @enum {string}
       */
      dayOfWeek: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
      /** @description Determines behaviour of category groups. True equates to these category groups being included, false equates to them being excluded. */
      includeCategoryGroupType: boolean
      /** @description Determines behaviour of incentive groups. True equates to these incentive groups being included, false equates to them being excluded. */
      includeIncentiveGroupType: boolean
      /** @description Determines behaviour of location groups. True equates to these location groups being included, false equates to them being excluded. */
      includeLocationGroupType: boolean
      /**
       * @description name
       * @example Monday Session
       */
      name: string
      /** @description list of permitted session location groups */
      permittedLocationGroups: components['schemas']['SessionLocationGroupDto'][]
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
      /** @description list of permitted prisoner category groups */
      prisonerCategoryGroups: components['schemas']['SessionCategoryGroupDto'][]
      /** @description list of permitted incentive level groups */
      prisonerIncentiveLevelGroups: components['schemas']['SessionIncentiveLevelGroupDto'][]
      /**
       * @description Reference
       * @example v9d.7ed.7u
       */
      reference: string
      /** @description session capacity */
      sessionCapacity: components['schemas']['SessionCapacityDto']
      /** @description Validity period for the session template */
      sessionDateRange: components['schemas']['SessionDateRangeDto']
      /** @description The time slot of the generated visit session(s) */
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
      /**
       * @description Visit Room
       * @example A1 L3
       */
      visitRoom: string
      /**
       * @description visit type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * Format: int32
       * @description number of weeks until the weekly day is repeated
       * @example 1
       */
      weeklyFrequency: number
    }
    SessionTemplateVisitCountsDto: {
      /** @description Open and closed visit counts for the day */
      visitCounts: components['schemas']['SessionCapacityDto']
      /**
       * Format: date
       * @description Date when the visits are booked or reserved
       * @example 2023-07-01
       */
      visitDate: string
    }
    SessionTemplateVisitStatsDto: {
      /**
       * Format: int32
       * @description cancelled visit counts
       * @example 10
       */
      cancelCount: number
      /** @description count of cancelled visits by date */
      cancelVisitsByDate?: components['schemas']['SessionTemplateVisitCountsDto'][]
      /** @description Minimum Session Capacity */
      minimumCapacity: components['schemas']['SessionCapacityDto']
      /**
       * Format: int32
       * @description booked, reserved or changing visit counts
       * @example 10
       */
      visitCount: number
      /** @description count of visits by date */
      visitsByDate?: components['schemas']['SessionTemplateVisitCountsDto'][]
    }
    SessionTimeSlotDto: {
      /**
       * Format: HH:mm
       * @description The end time of the generated visit session(s)
       * @example 11:30
       */
      endTime: string
      /**
       * Format: HH:mm
       * @description The start time of the generated visit session(s)
       * @example 10:30
       */
      startTime: string
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    UpdateCategoryGroupDto: {
      /** @description list of category for group */
      categories: (
        | 'A_EXCEPTIONAL'
        | 'A_HIGH'
        | 'A_PROVISIONAL'
        | 'A_STANDARD'
        | 'B'
        | 'C'
        | 'D'
        | 'YOI_CLOSED'
        | 'YOI_OPEN'
        | 'YOI_RESTRICTED'
        | 'UNSENTENCED'
        | 'UNCATEGORISED_SENTENCED_MALE'
        | 'FEMALE_RESTRICTED'
        | 'FEMALE_CLOSED'
        | 'FEMALE_SEMI'
        | 'FEMALE_OPEN'
      )[]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
    }
    UpdateIncentiveGroupDto: {
      /** @description list of allowed incentive levels for group */
      incentiveLevels: ('ENHANCED' | 'ENHANCED_2' | 'ENHANCED_3' | 'BASIC' | 'STANDARD')[]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
    }
    UpdateLocationGroupDto: {
      /** @description list of locations for group */
      locations: components['schemas']['PermittedSessionLocationDto'][]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
    }
    /** @description Prison update dto */
    UpdatePrisonDto: {
      /**
       * Format: int32
       * @description Age of adults in years
       */
      adultAgeYears?: number
      /**
       * Format: int32
       * @description Max number of adults
       */
      maxAdultVisitors?: number
      /**
       * Format: int32
       * @description Max number of children, if -1 then no limit is applied
       */
      maxChildVisitors?: number
      /**
       * Format: int32
       * @description Max number of total visitors
       */
      maxTotalVisitors?: number
      /**
       * Format: int32
       * @description maximum number of days notice from the current date to booked a visit
       * @example 28
       */
      policyNoticeDaysMax?: number
      /**
       * Format: int32
       * @description minimum number of days notice from the current date to booked a visit
       * @example 2
       */
      policyNoticeDaysMin?: number
    }
    UpdateSessionTemplateDto: {
      /** @description list of group references for allowed prisoner category groups */
      categoryGroupReferences?: string[]
      /** @description Session template user clients. */
      clients?: components['schemas']['UserClientDto'][]
      /** @description list of group references for allowed prisoner incentive levels */
      incentiveLevelGroupReferences?: string[]
      /** @description Determines behaviour of category groups. True equates to these category groups being included, false equates to them being excluded. */
      includeCategoryGroupType?: boolean
      /** @description Determines behaviour of incentive groups. True equates to these incentive groups being included, false equates to them being excluded. */
      includeIncentiveGroupType?: boolean
      /** @description Determines behaviour of location groups. True equates to these location groups being included, false equates to them being excluded. */
      includeLocationGroupType?: boolean
      /** @description list of group references for permitted session location groups */
      locationGroupReferences?: string[]
      /**
       * @description Name for Session template
       * @example Monday Xmas
       */
      name: string
      /** @description The open and closed capacity of the session template */
      sessionCapacity?: components['schemas']['SessionCapacityDto']
      /** @description The start and end date of the Validity period for the session template */
      sessionDateRange?: components['schemas']['SessionDateRangeDto']
      /** @description The start and end time of the generated visit session(s) */
      sessionTimeSlot?: components['schemas']['SessionTimeSlotDto']
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom?: string
      /**
       * Format: int32
       * @description number of weeks until the weekly day is repeated
       * @example 1
       */
      weeklyFrequency?: number
    }
    UpdateVisitFromExternalSystemDto: {
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /** @description Contact associated with the visit */
      visitContact: components['schemas']['ContactDto']
      /** @description Visit Notes */
      visitNotes: components['schemas']['VisitNoteDto'][]
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Room
       * @example A1
       */
      visitRoom: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description Additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
    }
    /** @description Prison / Session Template user client dto */
    UserClientDto: {
      /**
       * @description is prison user client active
       * @example true
       */
      active: boolean
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
    }
    ValidationErrorResponse: {
      validationMessages: string[]
    }
    /** @description Visit */
    VisitDto: {
      /**
       * @description Application Reference
       * @example dfs-wjs-eqr
       */
      applicationReference?: string
      /**
       * Format: date-time
       * @description The visit created date and time
       * @example 2018-12-01T13:45:00
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /**
       * Format: date-time
       * @description Date the visit was first booked or migrated
       * @example 2018-12-01T13:45:00
       */
      firstBookedDateTime?: string
      /**
       * Format: date-time
       * @description The visit modified date and time
       * @example 2018-12-01T13:45:00
       */
      modifiedTimestamp: string
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
        | 'BOOKER_CANCELLED'
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description session template Reference
       * @example dfs-wjs-eqr
       */
      sessionTemplateReference?: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      /** @description Contact associated with the visit */
      visitContact: components['schemas']['ContactDto']
      /** @description External system details associated with the visit */
      visitExternalSystemDetails?: components['schemas']['VisitExternalSystemDetailsDto']
      /** @description Visit Notes */
      visitNotes: components['schemas']['VisitNoteDto'][]
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * @description Visit Status
       * @example BOOKED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN'
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description Additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
    }
    VisitExternalSystemDetailsDto: {
      /**
       * @description Client name
       * @example client_name
       */
      clientName?: string
      /**
       * @description Client visit reference
       * @example Reference ID in the client system
       */
      clientVisitReference?: string
    }
    /** @description VisitNote */
    VisitNoteDto: {
      /**
       * @description Note text
       * @example Visitor is concerned that his mother in-law is coming!
       */
      text: string
      /**
       * @description Note type
       * @example VISITOR_CONCERN
       * @enum {string}
       */
      type: 'VISITOR_CONCERN' | 'VISIT_OUTCOMES' | 'VISIT_COMMENT' | 'STATUS_CHANGED_REASON'
    }
    VisitNotificationEventAttributeDto: {
      /**
       * @description Name of the attribute associated with the notification event
       * @example VISITOR_RESTRICTION
       * @enum {string}
       */
      attributeName: 'VISITOR_RESTRICTION' | 'VISITOR_RESTRICTION_ID' | 'VISITOR_ID' | 'PAIRED_VISIT'
      /**
       * @description Value of the attribute associated with the notification event
       * @example BAN
       */
      attributeValue: string
    }
    /** @description Visit notification event details. */
    VisitNotificationEventDto: {
      /** @description Additional data, empty list if no additional data associated */
      additionalData: components['schemas']['VisitNotificationEventAttributeDto'][]
      /**
       * Format: date-time
       * @description Created date and time
       * @example 2018-12-01T13:45:00
       */
      createdDateTime: string
      /**
       * @description Notification Event Reference
       * @example aa-bb-cc-dd
       */
      notificationEventReference: string
      /**
       * @description Notification Event Type
       * @enum {string}
       */
      type:
        | 'NON_ASSOCIATION_EVENT'
        | 'PRISONER_RELEASED_EVENT'
        | 'PRISONER_RESTRICTION_CHANGE_EVENT'
        | 'PRISON_VISITS_BLOCKED_FOR_DATE'
        | 'SESSION_VISITS_BLOCKED_FOR_DATE'
        | 'PRISONER_RECEIVED_EVENT'
        | 'PRISONER_ALERTS_UPDATED_EVENT'
        | 'PERSON_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_UNAPPROVED_EVENT'
    }
    VisitNotificationsDto: {
      /**
       * @description username of the last user to book the visit
       * @example SMITH1
       */
      bookedBy: components['schemas']['ActionedByDto']
      /** @description A list of filtered notifications for a visit */
      notifications: components['schemas']['VisitNotificationEventDto'][]
      /**
       * @description Prisoner Number
       * @example AF34567G
       */
      prisonerNumber: string
      /**
       * Format: date
       * @description The date of the visit
       * @example 2023-11-08
       */
      visitDate: string
      /**
       * @description Visit Booking Reference
       * @example v9-d7-ed-7u
       */
      visitReference: string
    }
    /** @description Visit Session */
    VisitSessionDto: {
      /**
       * Format: int32
       * @description The count of closed visit bookings already reserved or booked for this session
       * @example 1
       */
      closedVisitBookedCount?: number
      /**
       * Format: int32
       * @description The number of closed visits which may take place within this session
       * @example 1
       */
      closedVisitCapacity: number
      /**
       * Format: date-time
       * @description The end timestamp for this visit session
       * @example 2020-11-01T14:30:00
       */
      endTimestamp: string
      /**
       * Format: int32
       * @description The count of open visit bookings already reserved or booked for this session
       * @example 1
       */
      openVisitBookedCount?: number
      /**
       * Format: int32
       * @description The number of concurrent visits which may take place within this session
       * @example 1
       */
      openVisitCapacity: number
      /**
       * @description The prison id
       * @example LEI
       */
      prisonId: string
      /** @description Session conflicts */
      sessionConflicts: ('NON_ASSOCIATION' | 'DOUBLE_BOOKING_OR_RESERVATION')[]
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * Format: date-time
       * @description The start timestamp for this visit session
       * @example 2020-11-01T12:00:00
       */
      startTimestamp: string
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * @description The type of visits taking place within this session
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
    }
    VisitorApprovedUnapprovedNotificationDto: {
      prisonerNumber: string
      visitorId: string
    }
    /** @description Visitor */
    VisitorDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description true if visitor is the contact for the visit otherwise false
       * @example true
       */
      visitContact?: boolean
    }
    VisitorRestrictionUpsertedNotificationDto: {
      restrictionId: string
      restrictionType: string
      /** Format: date */
      validFromDate: string
      /** Format: date */
      validToDate?: string
      visitorId: string
    }
    /** @description Visitor support */
    VisitorSupportDto: {
      /**
       * @description Support text description
       * @example visually impaired assistance
       */
      description: string
    }
    /**
     * @description Visit Restriction - OPEN / CLOSED / UNKNOWN
     * @example OPEN
     */
    visitRestrictions: ('OPEN' | 'CLOSED' | 'UNKNOWN')[]
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  createCategoryGroup: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCategoryGroupDto']
      }
    }
    responses: {
      /** @description Created category group */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionCategoryGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create category group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCategoryGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example afe~dcb~fc
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Category groups returned for given prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionCategoryGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view category group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Category group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCategoryGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCategoryGroupDto']
      }
    }
    responses: {
      /** @description Updated category group */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionCategoryGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update category group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Category group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSessionCategoryGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Category group deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Category group delete validation errorsvalidation errors */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view category group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session category group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCategoryGroups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example MDI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Category groups returned for given prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionCategoryGroupDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view category groups */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createIncentiveGroup: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveGroupDto']
      }
    }
    responses: {
      /** @description Created incentive group */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionIncentiveLevelGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create incentive group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncentiveGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example afe~dcb~fc
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incentive group returned for given reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionIncentiveLevelGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view incentive group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incentive group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateIncentiveGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateIncentiveGroupDto']
      }
    }
    responses: {
      /** @description Updated incentive group */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionIncentiveLevelGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update incentive group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incentive group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSessionIncentiveGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incentive group deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Incentive group delete validation errors */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view  incentive group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session incentive group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncentiveGroups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example MDI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incentive groups returned for given prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionIncentiveLevelGroupDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view incentive groups */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createLocationGroup: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLocationGroupDto']
      }
    }
    responses: {
      /** @description Created location group */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create location group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example afe~dcb~fc
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Location groups returned for given prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateLocationGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLocationGroupDto']
      }
    }
    responses: {
      /** @description Updated location group */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update location group */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSessionLocationGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Session templates deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Location group delete validation errors */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session location group not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example MDI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Location groups returned for given prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get all prisons */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPrison: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonDto']
      }
    }
    responses: {
      /** @description Prison created */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePrisonDto']
      }
    }
    responses: {
      /** @description Prison created */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  activatePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison activated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to activate prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description prison cant be found to activate */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  activatePrisonForClient: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
        /**
         * @description type
         * @example STAFF
         */
        type: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison client activated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserClientDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to activate prison client */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description prison cant be found to activate prison client */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deActivatePrisonClient: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
        /**
         * @description type
         * @example STAFF
         */
        type: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison client activated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserClientDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to activate prison client */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description prison cant be found to activate prison client */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deActivatePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison deactivated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to deactivate prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description prison cant be found to deactivate */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionTemplates: {
    parameters: {
      query: {
        /**
         * @description Filter results by prison id/code
         * @example MDI
         */
        prisonCode: string
        /**
         * @description Filters session templates depending on their from and to Date
         * @example CURRENT_OR_FUTURE
         */
        rangeType: 'CURRENT_OR_FUTURE' | 'HISTORIC' | 'ALL'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Session templates returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionTemplateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  moveVisits: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveVisitsDto']
      }
    }
    responses: {
      /** @description Number of visits migrated on successful switching of session template. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Invalid session reference passed. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get matching session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unable to move visits to session template for reasons detailed */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationErrorResponse']
        }
      }
    }
  }
  createSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSessionTemplateDto']
      }
    }
    responses: {
      /** @description Session templates created */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMatchingSessionTemplatesOnCreate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSessionTemplateDto']
      }
    }
    responses: {
      /** @description List of clashing session templates or empty list if no matches found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get matching session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Invalid request */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Session templates returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session Template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSessionTemplateDto']
      }
    }
    responses: {
      /** @description Session templates updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Session Template update validation errors */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session Template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Session templates deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Session Template delete validation errors */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to delete session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session Template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  activateSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description session template activated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to activate session template */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description session template can't be found to activate */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  activateSessionTemplateForClient: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example aaa-bbb-ccc
         */
        reference: string
        /**
         * @description type
         * @example STAFF
         */
        type: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description session template client activated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserClientDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to activate prison client */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description session template cannot be found to activate session template client */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deActivateSessionTemplateClient: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example aaa-bbb-ccc
         */
        reference: string
        /**
         * @description type
         * @example STAFF
         */
        type: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description session template client deactivated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserClientDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to activate prison client */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description session template cannot be found to deactivate session template client */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deActivateSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Session template deactivated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to deactivate session template */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description session template can't be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonExcludeDates_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example abc-def-ghi
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description session template's exclude dates returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ExcludeDateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get exclude dates for a session template */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addSessionExcludeDate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example qqw-rew-aws
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description successfully added exclude date to a session */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description exclude date provided already exists for session or session can't be found */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add exclude dates to a prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeSessionTemplateExcludeDate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description successfully removed exclude date for a session template */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description exclude date does not exist for session template or session template can't be found */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove exclude date for a session template */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMatchingSessionTemplatesOnUpdate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSessionTemplateDto']
      }
    }
    responses: {
      /** @description List of clashing session templates or empty list if no matches found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get matching session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Invalid request */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionTemplateVisitStats: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestSessionTemplateVisitStatsDto']
      }
    }
    responses: {
      /** @description Session template visits stats */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionTemplateVisitStatsDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get Session template visits stats */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description session template can't be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSupportedPrisonCodes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description type
         * @example STAFF
         */
        type: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Supported prisons returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          /** @example [
           *       "HEI",
           *       "MDI"
           *     ] */
          'application/json': string[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get supported prisons */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateVisit: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MigrateVisitRequestDto']
      }
    }
    responses: {
      /** @description Visit migrated */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Incorrect request to migrate a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to migrate a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Request to migrate a visit too far in the future */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelVisit_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MigratedCancelVisitDto']
      }
    }
    responses: {
      /** @description Cancelled visit migrated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to cancelled visit migrated */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to cancelled visit migrated */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonExcludeDates: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison's exclude dates returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ExcludeDateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addPrisonExcludeDate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description successfully added exclude date to a prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description exclude date  provided already exists for prison or prison can't be found */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add exclude dates to a prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removePrisonExcludeDate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description successfully removed exclude date from a prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description exclude date does not exist for prison or prison can't be found */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add exclude dates to a prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFuturePublicBookedVisitsByBookerReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Future public booked visits returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto'][]
        }
      }
      /** @description Incorrect request to get future booked visits by booker reference */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPublicPastVisitsByBookerReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description past public visits returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto'][]
        }
      }
      /** @description Incorrect request to get past public visits by booker reference */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPublicCanceledVisitsByBookerReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description cancelled public visits returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto'][]
        }
      }
      /** @description Incorrect request to get cancelled public visits by booker reference */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitBookingSessions: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId: string
        /**
         * @description Override the default minimum number of days notice from the current date
         * @example 2
         */
        min?: number
        /**
         * @description Override the default maximum number of days to book-ahead from the current date
         * @example 28
         */
        max?: number
        /**
         * @description Username for the user making the request. Used to exclude user's pending applications from session capacity count. Optional, ignored if not passed in.
         * @example user-1
         */
        username?: string
        /**
         * @description userType
         * @example STAFF
         */
        userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit session information returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitSessionDto'][]
        }
      }
      /** @description Incorrect request to Get visit sessions  */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAvailableVisitBookingSessions: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId: string
        /**
         * @description Filter results by session restriction - OPEN or CLOSED
         * @example CLOSED
         */
        sessionRestriction: 'OPEN' | 'CLOSED'
        /**
         * @description Session slot from date
         * @example 2024-12-03
         */
        fromDate: string
        /**
         * @description Session slot to date
         * @example 2024-12-20
         */
        toDate: string
        /**
         * @description The current application reference to be excluded from capacity count and double booking
         * @example dfs-wjs-eqr
         */
        excludedApplicationReference?: string
        /**
         * @description Username for the user making the request. Used to exclude user's pending applications from session capacity count. Optional, ignored if not passed in.
         * @example user-1
         */
        username?: string
        /**
         * @description userType
         * @example STAFF
         */
        userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Available visit session details returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AvailableVisitSessionDto'][]
        }
      }
      /** @description Incorrect request to GET available visit sessions */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionCapacity: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example CLI
         */
        prisonId: string
        /**
         * @description Session date
         * @example 2020-11-01
         */
        sessionDate: string
        /**
         * @description Session start time
         * @example 13:30:00
         */
        sessionStartTime: string
        /**
         * @description Session end time
         * @example 14:30:00
         */
        sessionEndTime: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the session capacity for the given sessions */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionCapacityDto']
        }
      }
      /** @description Incorrect request  */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Capacity not found  */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionSchedule: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Query by session scheduled date
         * @example 2020-11-01
         */
        date: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Session scheduled information returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionScheduleDto'][]
        }
      }
      /** @description Incorrect request to get session scheduled */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitSession: {
    parameters: {
      query: {
        /**
         * @description Prison code
         * @example MDI
         */
        prisonCode: string
        /**
         * @description Session date
         * @example 2020-11-01
         */
        sessionDate: string
        /**
         * @description Session template reference
         * @example xye-fjc-abc
         */
        sessionTemplateReference: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the session was found and returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitSessionDto']
        }
      }
      /** @description Incorrect request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Capacity not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createInitialApplication: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApplicationDto']
      }
    }
    responses: {
      /** @description Application slot reserved */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to reserve a slot */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to reserve a slot for the application */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  changeIncompleteApplication: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description applicationReference
         * @example dfs-wjs-eqr
         */
        applicationReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeApplicationDto']
      }
    }
    responses: {
      /** @description Application slot changed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to change a application slot */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to change application slot */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit slot not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createApplicationForAnExistingVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookingReference
         * @example v9-d7-ed-7u
         */
        bookingReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApplicationDto']
      }
    }
    responses: {
      /** @description Application created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect application details to change a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions for application to change a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createVisitFromExternalSystem: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVisitFromExternalSystemDto']
      }
    }
    responses: {
      /** @description Visit created */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to create a visit from an external system */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create a visit from an external system */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Entity not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitReferenceByClientReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description clientReference
         * @example AABDC234
         */
        clientReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit reference returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description Incorrect request to get a visit reference */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a visit reference */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Client reference not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateVisitFromExternalSystem: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVisitFromExternalSystemDto']
      }
    }
    responses: {
      /** @description Visit updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to update a visit from an external system */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update a visit from an external system */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Existing visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatNonAssociationHasChanged: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NonAssociationChangedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatPersonRestrictionUpserted: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonRestrictionUpsertedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatPrisonerAlertCreatedUpdated: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerAlertCreatedUpdatedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of alert */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of alert */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatPrisonerReceivedChanged: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerReceivedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatPrisonerReleasedChanged: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerReleasedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatPrisonerRestrictionChanged: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerRestrictionChangeNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNotificationEventsForBookingReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookingReference
         * @example v9*d7*ed*7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully retrieved visit notification events by booking reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitNotificationEventDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  ignoreVisitNotifications: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IgnoreVisitNotificationsDto']
      }
    }
    responses: {
      /** @description Visit notifications cleared and reason noted. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to ignore visit notifications. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to ignore visit notifications. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatVisitorApproved: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VisitorApprovedUnapprovedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatVisitorRestrictionUpserted: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VisitorRestrictionUpsertedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyVSiPThatVisitorUnapproved: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VisitorApprovedUnapprovedNotificationDto']
      }
    }
    responses: {
      /** @description notification has completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to notify VSiP of change */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNotificationCountForPrison: {
    parameters: {
      query?: {
        /** @description list of notificationEventTypes */
        types?: (
          | 'NON_ASSOCIATION_EVENT'
          | 'PRISONER_RELEASED_EVENT'
          | 'PRISONER_RESTRICTION_CHANGE_EVENT'
          | 'PRISON_VISITS_BLOCKED_FOR_DATE'
          | 'SESSION_VISITS_BLOCKED_FOR_DATE'
          | 'PRISONER_RECEIVED_EVENT'
          | 'PRISONER_ALERTS_UPDATED_EVENT'
          | 'PERSON_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_UNAPPROVED_EVENT'
        )[]
      }
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Retrieve notification count for a prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationCountDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFutureNotificationVisits: {
    parameters: {
      query?: {
        /** @description list of notificationEventTypes */
        types?: (
          | 'NON_ASSOCIATION_EVENT'
          | 'PRISONER_RELEASED_EVENT'
          | 'PRISONER_RESTRICTION_CHANGE_EVENT'
          | 'PRISON_VISITS_BLOCKED_FOR_DATE'
          | 'SESSION_VISITS_BLOCKED_FOR_DATE'
          | 'PRISONER_RECEIVED_EVENT'
          | 'PRISONER_ALERTS_UPDATED_EVENT'
          | 'PERSON_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_UNAPPROVED_EVENT'
        )[]
      }
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Retrieved future visits with notifications by prison code. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitNotificationsDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  handleNotifyCallback: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotifyCallbackNotificationDto']
      }
    }
    responses: {
      /** @description callback handled successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  notifyMessageCreated: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotifyCreateNotificationDto']
      }
    }
    responses: {
      /** @description create message added successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to notify VSiP of change */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitsByFilterPageable: {
    parameters: {
      query: {
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId?: string
        /**
         * @description Filter results by prison id/code
         * @example MDI
         */
        prisonId?: string
        /**
         * @description Filter results by visits that start on or after the given timestamp
         * @example 2021-11-03
         */
        visitStartDate?: string
        /**
         * @description Filter results by visits that end on or before the given timestamp
         * @example 2021-11-03
         */
        visitEndDate?: string
        /**
         * @description Filter results by visit status
         * @example BOOKED
         */
        visitStatus: ('BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN')[]
        /**
         * @description Pagination page number, starting at zero
         * @example 0
         */
        page: number
        /**
         * @description Pagination size per page
         * @example 50
         */
        size: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageVisitDto']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve visits */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFutureVisitsBySessionPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned future visits (booked and cancelled) for a prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto'][]
        }
      }
      /** @description Incorrect request to get future (booked and cancelled) visits for a prisoner */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get future (booked and cancelled) visits for a prisoner */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitsBy: {
    parameters: {
      query: {
        /**
         * @description Session template reference
         * @example v9-d7-ed-7u
         */
        sessionTemplateReference?: string
        /**
         * @description Get visits from date
         * @example 2023-05-31
         */
        fromDate: string
        /**
         * @description Get visits to date
         * @example 2023-05-31
         */
        toDate: string
        /**
         * @description Visit Restriction - OPEN / CLOSED / UNKNOWN
         * @example OPEN
         */
        visitRestrictions?: components['schemas']['visitRestrictions']
        /**
         * @description Filter results by visit status
         * @example BOOKED
         */
        visitStatus: ('BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN')[]
        /**
         * @description Filter results by prison id/code
         * @example MDI
         */
        prisonCode: string
        /**
         * @description Pagination page number, starting at zero
         * @example 0
         */
        page: number
        /**
         * @description Pagination size per page
         * @example 50
         */
        size: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns visits for a session template or visits where session template reference is null if no session template reference parameter passed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageVisitDto']
        }
      }
      /** @description Incorrect request to get visits by session template */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get visits by session template */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  bookVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description applicationReference
         * @example dfs-wjs-eqr
         */
        applicationReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingRequestDto']
      }
    }
    responses: {
      /** @description Visit updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to book a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to book a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Application validation failed */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApplicationValidationErrorResponse']
        }
      }
    }
  }
  getVisitByApplicationReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description applicationReference
         * @example dfs-wjs-eqr
         */
        applicationReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to get a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description applicationReference
         * @example dfs-wjs-eqr
         */
        applicationReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingRequestDto']
      }
    }
    responses: {
      /** @description Visit updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to update a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Application validation failed */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApplicationValidationErrorResponse']
        }
      }
    }
  }
  getVisitByReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitDto']
      }
    }
    responses: {
      /** @description Visit cancelled */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to cancel a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to cancel a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitHistoryByReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit History Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EventAuditDto'][]
        }
      }
      /** @description Incorrect request to Get visit history */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve visit history */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
